import chain
import gm

import itertools

EF = 100

def error(design, chain):
    s = set([k for k in chain])
    for k in design:
        s.add(k)
    error = 0
    for k in s:
        dv = EF * design[k] if k in design else 0.0
        cv = EF * chain[k] if k in chain else 0.0
        if dv != 0:
            error += (dv-cv)**2 / dv
        else:
            print "ERROR {}".format(k)
            assert cv == 0.0
    return error

def sumdict(d):
    s = 0
    for k in d:
        s += d[k]
    return s
    
if __name__ == "__main__":
    #CHAIN 2
    #c = {(1, 2): 0.07432864802842075, (1, 1): 0.9256713519715792, (2, 1): 0.7196880675141545, (2, 2): 0.2803119324858455}
    #CHAIN 4 c = {(1, 2): 0.18765339878348095, (3, 2): 0.4659239842726081, (1, 3): 0.015953473482018993, (3, 3): 0.06094364351245085, (4, 1): 0.2391304347826087, (3, 1): 0.47182175622542594, (4, 4): 0.043478260869565216, (2, 1): 0.6210835926510081, (1, 1): 0.7958862447977804, (2, 3): 0.009633829233982693, (1, 4): 0.0005068829367196671, (4, 3): 0.2391304347826087, (2, 2): 0.36911206786308026, (4, 2): 0.4782608695652174, (3, 4): 0.001310615989515072, (2, 4): 0.00017051025192889722}
    #CHAIN 3 c = {(1, 2): 0.1340519959256924, (3, 2): 0.4292763157894737, (1, 3): 0.00630547606344279, (3, 3): 0.07730263157894737, (3, 1): 0.4934210526315789, (2, 1): 0.6662530284228565, (2, 3): 0.0024227382851740235, (2, 2): 0.3313242332919695, (1, 1): 0.8596425280108648}
    #CHAIN 5
    c = {(1, 3): 0.029073830183399818, (5, 4): 0.05263157894736842, (2, 1): 0.5738472772793657, (5, 1): 0.3157894736842105, (2, 5): 6.9545865498296125e-06, (1, 2): 0.22929006001989433, (3, 3): 0.07625349421464209, (4, 4): 0.023793787177792465, (1, 5): 5.273898451085324e-05, (2, 2): 0.40433618471381877, (4, 1): 0.3245208195637806, (1, 1): 0.7398400543797529, (3, 2): 0.49662078482714694, (1, 4): 0.0017433164324420934, (2, 3): 0.020867236942763753, (4, 2): 0.48645076007931265, (5, 3): 0.23684210526315788, (3, 4): 0.0004953823290046353, (3, 1): 0.42663033862920635, (4, 3): 0.16523463317911435, (5, 2): 0.39473684210526316, (2, 4): 0.0009423464775019125}
    #gm.make_chain()
    minv = (100000,None)
    PROCS = 5
    for valueset in itertools.product(range(20,35), repeat=PROCS-1):
        valued = {}
        for (index,value) in enumerate(valueset):
            index += 2
            valued[index] = value/10.0
        valued[1] = 3
        chain.setvals(valued)
        print valued
        try:
            d = chain.design(PROCS,.65)
            e = error(d,c)
        except AssertionError:
            print "Can't make design {}".format(valued)
            continue
        minv = min(minv, (e,valued))
    
    print minv 
